#version 330 core
#extension GL_OES_standard_derivatives : enable

out vec4 FragColor;
in vec4 worldPos;
in vec2 textCoords;

uniform vec3 lightSource_pos;
uniform vec3 cameraPos;

struct LightProperties {
	vec3 color;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct GlobalLight {
	vec3 direction;
	LightProperties prop;
};

struct Lamp {
	vec3 posistion;
	LightProperties prop;
};

struct ObjectMaterial {
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

uniform ObjectMaterial material;
uniform GlobalLight moon;
uniform Lamp lamp;

vec3 calcNormal(vec3 coord) {
	vec3 x_slope = dFdx(coord);
	vec3 y_slope = dFdy(coord);
	vec3 normal = normalize(cross(x_slope, y_slope));

	return normal;
}

float calcAttenuation(float dist) {
	float Kc = 1.0f;
	float Kl = 0.022f;
	float Kq = 0.0019f;

	float n = Kc + (Kl * dist) + (Kq * dist * dist);
	return (Kc / n);
}

vec3 lightInfluence(vec3 normal, vec3 worldCoord, vec3 lightD, LightProperties light){
	float diff = max(dot(normal, lightD), 0.0);

	vec3 viewD = normalize(cameraPos - worldCoord);	//view direction
	vec3 refD = reflect(-lightD, normal);			//reflect dirrection
	float spec = pow(max(dot(viewD, refD), 0.0), 32.0f);

	// Get texture material 
	vec3 diffMaterial = texture(material.diffuse, textCoords).rgb;
	vec3 specMaterial = texture(material.specular, textCoords).rgb;

	// calc values
	vec3 diffuse = (light.diffuse * diff * diffMaterial);
	vec3 ambient = (light.ambient * diffMaterial);
	vec3 specular = (light.specular * spec * specMaterial);

	return (diffuse + ambient + specular) * light.color;
}

void main() 
{
	vec3 normal = calcNormal(worldPos.xyz);
	vec3 Dir; 	//direction of light

	//moon lighting
	Dir = normalize(-moon.direction);
	vec3 global = lightInfluence(normal, worldPos.xyz, Dir, moon.prop);

	//lamp
	Dir = normalize(lamp.posistion - worldPos.xyz);
	float distance = length(lamp.posistion - worldPos.xyz);
	vec3 lamp = lightInfluence(normal, worldPos.xyz, Dir, lamp.prop) * calcAttenuation(distance);

	FragColor = vec4(global + lamp, 1.0);
}